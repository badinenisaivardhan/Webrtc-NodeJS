import { Socket } from "socket.io-client";
import { RTCClientSocket } from "rtc-socket-connector-types";
import { RTCConnectionStorage } from "./RTCConnectionStorage";
export interface RTCConnectionHandler {
    onDataChannel?: (socketId: string, dataChannel: RTCDataChannel) => void;
    onTrack?: (socketId: string, streams: MediaStream[]) => void;
    onRTCPeerConnection?: (socketId: string, rtcPeerConnection: RTCPeerConnection) => void;
}
interface ConnectOption {
    enableDataChannel?: boolean;
    enableMediaStream?: boolean;
}
export default class RTCConnectionManager {
    private connectionHandler;
    private rtcConfiguration?;
    socket: RTCClientSocket;
    connectionStorage: RTCConnectionStorage;
    mediaStream: MediaStream | null;
    constructor(socket: Socket, connectionHandler: RTCConnectionHandler, rtcConfiguration?: RTCConfiguration | undefined);
    private createConnection;
    private createDataChannel;
    private addCandidateHandler;
    private addDataChannelHandler;
    private addTrackHandler;
    private addSocketHandler;
    private addMediaStreamTrack;
    connect(answerSocketId: string, option: ConnectOption): void;
    setMediaStream(mediaStream: MediaStream): void;
}
export {};
//# sourceMappingURL=RTCConnectionManager.d.ts.map