import { Socket } from "socket.io";
import { Socket as ClientSocket } from "socket.io-client";
interface AnswerData {
    answerSocketId: string;
    answer: RTCSessionDescriptionInit;
    offerSocketId: string;
}
interface CandidateData {
    candidate: RTCIceCandidate;
    destSocketId: string;
    fromSocketId: string;
}
interface OfferData {
    answerSocketId: string;
    offer: RTCSessionDescriptionInit;
    offerSocketId: string;
    enableDataChannel: boolean;
    enableMediaStream: boolean;
}
declare type SocketHandler<T extends any[] = []> = (...args: T) => void;
declare type ClientRTCConnectionMessage = {
    answer: SocketHandler<[msg: AnswerData]>;
    offer: SocketHandler<[msg: OfferData]>;
    candidate: SocketHandler<[msg: CandidateData]>;
};
declare type ServerRTCConnectionMessage = {
    offer: SocketHandler<[msg: OfferData]>;
    answer: SocketHandler<[msg: AnswerData]>;
    candidate: SocketHandler<[msg: CandidateData]>;
};
export declare type RTCClientSocket = ClientSocket<ServerRTCConnectionMessage, ClientRTCConnectionMessage>;
export declare type RTCServerSocket = Socket<ClientRTCConnectionMessage, ServerRTCConnectionMessage>;
export {};
